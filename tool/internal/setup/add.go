// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

package setup

import (
	"fmt"

	"github.com/dave/dst"
	"github.com/open-telemetry/opentelemetry-go-compile-instrumentation/tool/internal/ast"
	"github.com/open-telemetry/opentelemetry-go-compile-instrumentation/tool/internal/rule"
)

const (
	OtelRuntimeFile = "otel.runtime.go"
)

//nolint:gochecknoglobals // This is a constant
var requiredImports = [][]string{
	{"runtime/debug", "_otel_debug"}, // The getstack function depends on runtime/debug
	{"log", "_otel_log"},             // The printstack function depends on log
	{"unsafe", "_"},                  // The golinkname tag depends on unsafe
}

func genImportDecl(matched []*rule.InstFuncRule) []dst.Decl {
	importDecls := make([]dst.Decl, 0, len(matched))
	for _, m := range matched {
		decl := ast.ImportDecl("_", m.Path)
		importDecls = append(importDecls, decl)
	}
	return importDecls
}

func genVarDecl(matched []*rule.InstFuncRule) []dst.Decl {
	decls := make([]dst.Decl, 0, len(matched))
	for i, m := range matched {
		// First variable declaration
		// //go:linkname _getstatck%d %s.OtelGetStackImpl
		// var _getstatck%d = _otel_debug.Stack
		value := ast.SelectorExpr(ast.Ident("_otel_debug"), "Stack")
		getStackVar := ast.VarDecl(fmt.Sprintf("_getstatck%d", i), value)
		getStackVar.Decs = dst.GenDeclDecorations{
			NodeDecs: dst.NodeDecs{
				Before: dst.NewLine,
				Start: dst.Decorations{
					fmt.Sprintf("//go:linkname _getstatck%d %s.OtelGetStackImpl",
						i, m.GetPath()),
				},
			},
		}
		// Second variable declaration
		// //go:linkname _printstack%d %s.OtelPrintStackImpl
		// var _printstack%d = func (bt []byte){ _otel_log.Printf(string(bt)) }
		val := &dst.FuncLit{
			Type: &dst.FuncType{
				Params: &dst.FieldList{
					List: []*dst.Field{
						{
							Names: []*dst.Ident{
								{Name: "bt"},
							},
							Type: &dst.ArrayType{
								Elt: &dst.Ident{Name: "byte"},
							},
						},
					},
				},
			},
			Body: &dst.BlockStmt{
				List: []dst.Stmt{
					&dst.ExprStmt{
						X: &dst.CallExpr{
							Fun: &dst.SelectorExpr{
								X:   &dst.Ident{Name: "_otel_log"},
								Sel: &dst.Ident{Name: "Printf"},
							},
							Args: []dst.Expr{
								&dst.CallExpr{
									Fun: &dst.Ident{Name: "string"},
									Args: []dst.Expr{
										&dst.Ident{Name: "bt"},
									},
								},
							},
						},
					},
				},
			},
		}
		printStackVar := ast.VarDecl(fmt.Sprintf("_printstack%d", i), val)
		printStackVar.Decs = dst.GenDeclDecorations{
			NodeDecs: dst.NodeDecs{
				Before: dst.NewLine,
				Start: dst.Decorations{
					fmt.Sprintf("//go:linkname _printstack%d %s.OtelPrintStackImpl",
						i, m.GetPath()),
				},
			},
		}
		decls = append(decls, getStackVar, printStackVar)
	}
	return decls
}

func buildOtelRuntimeAst(decls []dst.Decl) *dst.File {
	const comment = "// This file is generated by the opentelemetry-go-compile-instrumentation tool. DO NOT EDIT."
	return &dst.File{
		Name: ast.Ident("main"),
		Decs: dst.FileDecorations{
			NodeDecs: dst.NodeDecs{
				Start: dst.Decorations{
					comment,
				},
			},
		},
		Decls: decls,
	}
}

func (*SetupPhase) addDeps(matched []*rule.InstFuncRule) error {
	// Generate all kinds of declarations
	importDecls := genImportDecl(matched)
	// Add required imports
	for _, d := range requiredImports {
		importDecls = append(importDecls, ast.ImportDecl(d[1], d[0]))
	}
	// Generate the variable declarations that used by otel runtime
	varDecls := genVarDecl(matched)
	// Build the ast
	decls := append(importDecls, varDecls...)
	root := buildOtelRuntimeAst(decls)
	// Write the ast to file
	err := ast.WriteFile(OtelRuntimeFile, root)
	if err != nil {
		return err
	}
	return nil
}
